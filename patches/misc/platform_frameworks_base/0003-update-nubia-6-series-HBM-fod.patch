From 7cc21463304e00bb4ea87400d4d8d2a2de790996 Mon Sep 17 00:00:00 2001
From: Huy Hoang <boydaihungst@gmail.com>
Date: Fri, 10 Nov 2023 07:53:07 +0700
Subject: [PATCH] nubia-6-series-hbm-fod

---
 core/res/res/values/config.xml                |  26 +++++
 core/res/res/values/symbols.xml               |   5 +
 .../systemui/biometrics/UdfpsController.java  | 108 ++++++++++++++++--
 .../biometrics/UdfpsControllerOverlay.kt      |   6 +
 .../android/systemui/biometrics/UdfpsView.kt  |   2 -
 5 files changed, 136 insertions(+), 11 deletions(-)

diff --git a/core/res/res/values/config.xml b/core/res/res/values/config.xml
index b4a72812aa41..3d3dcb6329b0 100644
--- a/core/res/res/values/config.xml
+++ b/core/res/res/values/config.xml
@@ -6443,4 +6443,30 @@
 
     <!-- Whether unlocking and waking a device are sequenced -->
     <bool name="config_orderUnlockAndWake">false</bool>
+
+    <!-- Flag to enable framework dimming for udfps -->
+    <bool name="config_udfpsFrameworkDimming">false</bool>
+
+    <!-- Array of brightness-alpha lut for framework dimming -->
+    <string-array name="config_udfpsDimmingBrightnessAlphaArray" translatable="false">
+    <!-- Example:
+      <item>(brightness from 0 to 255) - (brightness from min - max) - (alpha value) </item> 
+      <item>246-3936-45</item>
+      <item>247-3952-44</item>
+      <item>248-3968-44</item>
+      <item>249-3984-43</item>
+      <item>250-4000-42</item>
+      <item>251-4016-42</item>
+      <item>252-4032-41</item>
+      <item>253-4048-40</item>
+      <item>254-4064-39</item>
+      <item>255-4080-38</item>
+    -->
+    </string-array>
+
+    <!-- The amount of delay to add when disabling the dimming.
+         This is used to prevent flickers due to the dimming being disabled
+         before the screen has had chance to switch out of HBM mode -->
+     <integer name="config_udfpsDimmingDisableDelay">0</integer>
+     <integer name="config_udfpsDimmingEnableDelay">0</integer>
 </resources>
diff --git a/core/res/res/values/symbols.xml b/core/res/res/values/symbols.xml
index a61d0d446a06..5b2eaad9703b 100644
--- a/core/res/res/values/symbols.xml
+++ b/core/res/res/values/symbols.xml
@@ -5135,4 +5135,9 @@
 
   <!-- Whether we order unlocking and waking -->
   <java-symbol type="bool" name="config_orderUnlockAndWake" />
+
+  <java-symbol type="array"   name="config_udfpsDimmingBrightnessAlphaArray" />
+  <java-symbol type="bool"   name="config_udfpsFrameworkDimming" />
+  <java-symbol type="integer"   name="config_udfpsDimmingDisableDelay" />
+  <java-symbol type="integer"   name="config_udfpsDimmingEnableDelay" />
 </resources>
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
index 13c621f456bb..acafe65e15e8 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsController.java
@@ -52,6 +52,7 @@ import android.os.Trace;
 import android.os.SystemProperties;
 import android.os.VibrationAttributes;
 import android.os.VibrationEffect;
+import android.provider.Settings;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.MotionEvent;
@@ -219,6 +220,10 @@ public class UdfpsController implements DozeReceiver, Dumpable {
     private boolean mAttemptedToDismissKeyguard;
     private final Set<Callback> mCallbacks = new HashSet<>();
     private final int mUdfpsVendorCode;
+    private boolean mFrameworkDimming;
+    private int[][] mBrightnessAlphaArray;
+    private String nubiaHbmState = "/sys/kernel/lcd_enhance/hbm_state";
+    private Integer brightnessBeforeDim = 0;
 
     @VisibleForTesting
     public static final VibrationAttributes UDFPS_VIBRATION_ATTRIBUTES =
@@ -1009,7 +1014,8 @@ public class UdfpsController implements DozeReceiver, Dumpable {
 
     private void showUdfpsOverlay(@NonNull UdfpsControllerOverlay overlay) {
         mExecution.assertIsMainThread();
-
+        mFrameworkDimming = mContext.getResources().getBoolean(com.android.internal.R.bool.config_udfpsFrameworkDimming);
+        parseBrightnessAlphaArray();
         mOverlay = overlay;
         final int requestReason = overlay.getRequestReason();
         if (requestReason == REASON_AUTH_KEYGUARD
@@ -1149,6 +1155,48 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         }
     }
 
+    private int getBrightness() {
+        int brightness = Settings.System.getInt(mContext.getContentResolver(),
+                    Settings.System.SCREEN_BRIGHTNESS, 100);
+        return brightness;
+    }
+
+    private void updateViewDimAmount(boolean pressed) {
+        if (mFrameworkDimming) {
+            if (pressed) {
+                int curBrightness = getBrightness();
+                brightnessBeforeDim = curBrightness;
+                int maxBrightness = 255;
+
+                if (curBrightness > 255) {
+                    curBrightness = 255;
+                }
+                float dimAmount = ((float)mBrightnessAlphaArray[curBrightness][1]) / 255.0f;
+                Log.w("PHH-Enroll", "curBrightness=" + curBrightness);
+                Log.w("PHH-Enroll", "dimAmount=" + dimAmount);
+                mOverlay.updateDimAmount(dimAmount);
+            } else {
+                mOverlay.updateDimAmount(0.0f);
+            }
+        }
+    }
+
+    private void parseBrightnessAlphaArray() {
+        mFrameworkDimming = mContext.getResources().getBoolean(R.bool.config_udfpsFrameworkDimming);
+        if (mFrameworkDimming) {
+            String[] array = mContext.getResources().getStringArray(
+                    R.array.config_udfpsDimmingBrightnessAlphaArray);
+            mBrightnessAlphaArray = new int[array.length][2];
+            for (int i = 0; i < array.length; i++) {
+                String[] s = array[i].split("-");
+                mBrightnessAlphaArray[i][0] = Integer.parseInt(s[0]);
+                mBrightnessAlphaArray[i][1] = Integer.parseInt(s[1]);
+                if (s.length >= 3) {
+                    mBrightnessAlphaArray[i][1] = Integer.parseInt(s[2]);
+                }
+            }
+        }
+    }
     private boolean isOptical() {
         return mSensorProps.sensorType == FingerprintSensorProperties.TYPE_UDFPS_OPTICAL;
     }
@@ -1157,6 +1205,17 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         return mOnFingerDown;
     }
 
+    private void writeToFile(String filePath, String data) {
+        try{
+            if (filePath == null) return;
+            PrintWriter writer = new PrintWriter(filePath);
+            writer.print(data);
+            writer.close();
+         }catch(Exception e){
+            e.printStackTrace();
+         }
+    }
+
     private void dispatchOnUiReady(long requestId) {
         if (mAlternateTouchProvider != null) {
             mBiometricExecutor.execute(() -> {
@@ -1252,18 +1311,27 @@ public class UdfpsController implements DozeReceiver, Dumpable {
             } else {
                 view.configureDisplay(() -> dispatchOnUiReady(requestId));
             }
+            if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
+                processCmd(13, 0, 0, new byte[0], 0);
+            }
+            // Only run if supported framework dimming
+            if(mFrameworkDimming) {
+                final int delay = mContext.getResources().getInteger(
+                 com.android.internal.R.integer.config_udfpsDimmingEnableDelay);
+                // Delay for dimming rendering
+                   updateViewDimAmount(true);
+                mFgExecutor.executeDelayed(() -> {
+                // enable HBM
+                if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
+                  writeToFile(nubiaHbmState, "4095");
+                   processCmd(14, 0, 0, new byte[0], 0);
+                }
+                }, delay);
+            }
         }
-        if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
-          processCmd(13, 0, 0, new byte[0], 0);
-        }
-
         for (Callback cb : mCallbacks) {
             cb.onFingerDown();
         }
-        if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
-          processCmd(14, 0, 0, new byte[0], 0);
-        }
-
     }
 
     private void onFingerUp(long requestId, @NonNull UdfpsView view) {
@@ -1325,6 +1393,28 @@ public class UdfpsController implements DozeReceiver, Dumpable {
         mOnFingerDown = false;
         if (isOptical()) {
             unconfigureDisplay(view);
+            if(mFrameworkDimming) {
+                // Add a delay to ensure that the dim amount is updated after the display
+                // has had chance to switch out of HBM mode.
+                // The delay, in ms is stored in config_udfpsDimmingDisableDelay.
+                // If the delay is 0, the dim amount will be updated immediately.
+                final int delay = mContext.getResources().getInteger(
+                        com.android.internal.R.integer.config_udfpsDimmingDisableDelay);
+                if(SystemProperties.get("ro.vendor.build.fingerprint").contains("nubia/NX669")) {
+                    writeToFile(nubiaHbmState, Integer.toString((brightnessBeforeDim * 16)));
+                }
+                if (delay > 0) {
+                    mFgExecutor.executeDelayed(() -> {
+                        // A race condition exists where the overlay is destroyed before the the dim amount is updated.
+                        // This check ensures that the overlay is still valid.
+                        if (mOverlay != null && mOverlay.matchesRequestId(requestId)) {
+                            updateViewDimAmount(false);
+                        }
+                    }, delay);
+                } else {
+                    updateViewDimAmount(false);
+                }
+            }
         }
         cancelAodSendFingerUpAction();
     }
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
index 826804492bc7..ece3a90be0b8 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsControllerOverlay.kt
@@ -317,6 +317,12 @@ class UdfpsControllerOverlay @JvmOverloads constructor(
         return wasShowing
     }
 
+    fun updateDimAmount(newDimAmount: Float): Float {
+        coreLayoutParams.dimAmount = newDimAmount
+        windowManager.updateViewLayout(overlayView, coreLayoutParams)
+        return newDimAmount
+    }
+
     /**
      * This function computes the angle of touch relative to the sensor and maps
      * the angle to a list of help messages which are announced if accessibility is enabled.
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
index 841c66597c04..da2044967fd3 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/UdfpsView.kt
@@ -320,7 +320,6 @@ class UdfpsView(
         }
           if(hasNubiaHbm) {
             Log.d("PHH-Enroll", "Nubia scenario in UdfpsView reached!")
-            File(nubiaHbmState).writeText("4095")
           }
 
     }
@@ -369,7 +368,6 @@ class UdfpsView(
             ITouchFeature.getService().setTouchMode(0, 10, 0);
         } else if(hasNubiaHbm) {
             Log.d("PHH-Enroll", "Nubia Restore brightness")
-            File(nubiaHbmState).writeText(File("/sys/class/backlight/panel0-backlight/brightness").readText())
         } else {
             dimUpdate(0.0f)
         }
-- 
2.42.1

