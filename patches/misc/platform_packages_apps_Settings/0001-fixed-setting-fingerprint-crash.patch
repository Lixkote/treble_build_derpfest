From 49f92d7619761edf9a10ff88f3d1b75a29eae0ce Mon Sep 17 00:00:00 2001
From: Huy Hoang <boydaihungst@gmail.com>
Date: Sun, 19 Nov 2023 12:46:42 +0700
Subject: [PATCH] fixed setting fingerprint crash

---
 .../fingerprint/FingerprintSettings.java      | 13 ++++++++----
 ...ireScreenOnToAuthPreferenceController.java | 21 +------------------
 .../FingerprintUnlockCategoryController.java  |  3 +--
 3 files changed, 11 insertions(+), 26 deletions(-)

diff --git a/src/com/android/settings/biometrics/fingerprint/FingerprintSettings.java b/src/com/android/settings/biometrics/fingerprint/FingerprintSettings.java
index 5aeca1959a..70cb0f37cf 100644
--- a/src/com/android/settings/biometrics/fingerprint/FingerprintSettings.java
+++ b/src/com/android/settings/biometrics/fingerprint/FingerprintSettings.java
@@ -491,9 +491,13 @@ public class FingerprintSettings extends SubSettings {
         }
 
         private boolean isUdfps() {
-            for (FingerprintSensorPropertiesInternal prop : mSensorProperties) {
-                if (prop.isAnyUdfpsType()) {
-                    return true;
+            mFingerprintManager = Utils.getFingerprintManagerOrNull(getActivity());
+            if (mFingerprintManager != null) {
+                mSensorProperties = mFingerprintManager.getSensorPropertiesInternal();
+                for (FingerprintSensorPropertiesInternal prop : mSensorProperties) {
+                    if (prop.isAnyUdfpsType()) {
+                        return true;
+                    }
                 }
             }
             return false;
@@ -848,7 +852,8 @@ public class FingerprintSettings extends SubSettings {
 
         private List<AbstractPreferenceController> buildPreferenceControllers(Context context) {
             final List<AbstractPreferenceController> controllers = new ArrayList<>();
-            if (isSfps()) {
+            if (!isUdfps() && context.getResources().getBoolean(
+                    com.android.internal.R.bool.config_fingerprintWakeAndUnlock)) {
                 mFingerprintUnlockCategoryPreferenceController =
                     new FingerprintUnlockCategoryController(
                         context,
diff --git a/src/com/android/settings/biometrics/fingerprint/FingerprintSettingsRequireScreenOnToAuthPreferenceController.java b/src/com/android/settings/biometrics/fingerprint/FingerprintSettingsRequireScreenOnToAuthPreferenceController.java
index 2cfd5818a3..f58fe9c2cb 100644
--- a/src/com/android/settings/biometrics/fingerprint/FingerprintSettingsRequireScreenOnToAuthPreferenceController.java
+++ b/src/com/android/settings/biometrics/fingerprint/FingerprintSettingsRequireScreenOnToAuthPreferenceController.java
@@ -18,7 +18,6 @@ package com.android.settings.biometrics.fingerprint;
 
 import android.content.Context;
 import android.hardware.fingerprint.FingerprintManager;
-import android.hardware.fingerprint.FingerprintSensorPropertiesInternal;
 import android.os.UserHandle;
 import android.provider.Settings;
 
@@ -27,8 +26,6 @@ import androidx.preference.Preference;
 import com.android.internal.annotations.VisibleForTesting;
 import com.android.settings.Utils;
 
-import java.util.ArrayList;
-import java.util.List;
 
 /**
  * Preference controller that controls whether a SFPS device is required to be interactive for
@@ -41,17 +38,11 @@ public class FingerprintSettingsRequireScreenOnToAuthPreferenceController
 
     @VisibleForTesting
     protected FingerprintManager mFingerprintManager;
-    private List<FingerprintSensorPropertiesInternal> mSensorProperties;
 
     public FingerprintSettingsRequireScreenOnToAuthPreferenceController(
             Context context, String prefKey) {
         super(context, prefKey);
         mFingerprintManager = Utils.getFingerprintManagerOrNull(context);
-        try {
-            mSensorProperties = mFingerprintManager.getSensorPropertiesInternal();
-        } catch (Exception e) {
-            mSensorProperties = new ArrayList<>();
-        }
     }
 
     @Override
@@ -101,8 +92,7 @@ public class FingerprintSettingsRequireScreenOnToAuthPreferenceController
     @Override
     public int getAvailabilityStatus() {
         if (mFingerprintManager != null
-                && mFingerprintManager.isHardwareDetected()
-                && !isUdfps()) {
+                && mFingerprintManager.isHardwareDetected()) {
             return mFingerprintManager.hasEnrolledTemplates(getUserId())
                     ? AVAILABLE : CONDITIONALLY_UNAVAILABLE;
         } else {
@@ -114,13 +104,4 @@ public class FingerprintSettingsRequireScreenOnToAuthPreferenceController
         return UserHandle.of(getUserId()).getIdentifier();
     }
 
-    private boolean isUdfps() {
-        for (FingerprintSensorPropertiesInternal prop : mSensorProperties) {
-            if (prop.isAnyUdfpsType()) {
-                return true;
-            }
-        }
-        return false;
-    }
-
 }
diff --git a/src/com/android/settings/biometrics/fingerprint/FingerprintUnlockCategoryController.java b/src/com/android/settings/biometrics/fingerprint/FingerprintUnlockCategoryController.java
index 674a0dfa75..87fa7bf2dd 100644
--- a/src/com/android/settings/biometrics/fingerprint/FingerprintUnlockCategoryController.java
+++ b/src/com/android/settings/biometrics/fingerprint/FingerprintUnlockCategoryController.java
@@ -41,8 +41,7 @@ public class FingerprintUnlockCategoryController extends BasePreferenceControlle
     @Override
     public int getAvailabilityStatus() {
         if (mFingerprintManager != null
-                && mFingerprintManager.isHardwareDetected()
-                && mFingerprintManager.isPowerbuttonFps()) {
+                && mFingerprintManager.isHardwareDetected()){
             return mFingerprintManager.hasEnrolledTemplates(getUserId())
                     ? AVAILABLE : CONDITIONALLY_UNAVAILABLE;
         } else {
-- 
2.42.1

